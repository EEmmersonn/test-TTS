# api.py - –ø—Ä–æ—Å—Ç–æ–π API –¥–ª—è Piper TTS

from flask import Flask, request, send_file, jsonify
from piper import PiperVoice, SynthesisConfig
import wave
import os
import tempfile

app = Flask(__name__)

# üéôÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–æ–ª–æ—Å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
MODEL_PATH = "voices\en_US-lessac-medium.onnx"  # –∏–ª–∏ en_US-lessac-medium
if not os.path.exists(MODEL_PATH):
    print(f"–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {MODEL_PATH}")
    print("–ü–æ–ª–æ–∂–∏ –º–æ–¥–µ–ª—å –≤ –ø–∞–ø–∫—É voices/")
    exit(1)

print("–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å...")
voice = PiperVoice.load(MODEL_PATH)
print("–ì–æ—Ç–æ–≤–æ.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_CONFIG = SynthesisConfig(
    volume=1.0,
    length_scale=1.1,
    noise_scale=0.75,
    noise_w_scale=0.8,
    normalize_audio=True
)

@app.route('/tts', methods=['POST'])
def tts():
    data = request.get_json()
    text = data.get('text', '').strip()

    if not text:
        return jsonify({"error": "–ü–æ–ª–µ 'text' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"}), 400

    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    length_scale = float(data.get('length_scale', 1.1))
    noise_scale = float(data.get('noise_scale', 0.75))
    noise_w_scale = float(data.get('noise_w_scale', 0.8))

    custom_config = SynthesisConfig(
        volume=1.0,
        length_scale=length_scale,
        noise_scale=noise_scale,
        noise_w_scale=noise_w_scale,
        normalize_audio=True
    )

    # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π .wav —Ñ–∞–π–ª
    temp_wav = tempfile.NamedTemporaryFile(suffix=".wav", delete=False)
    temp_wav.close()

    try:
        with wave.open(temp_wav.name, "w") as wav_file:
            voice.synthesize_wav(text, wav_file, syn_config=custom_config)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        return send_file(temp_wav.name, as_attachment=True, download_name="speech.wav", mimetype="audio/wav")

    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/health', methods=['GET'])
def health():
    return jsonify({"status": "ok", "model": MODEL_PATH}), 200

if __name__ == '__main__':
    print("–ó–∞–ø—É—Å–∫ API –Ω–∞ http://localhost:5000")
    app.run(host='0.0.0.0', port=5000)